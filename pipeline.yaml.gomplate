# Variables
{{ $stagingImages := slice "downloader" "executor" "uploader" }}
{{ $otherImages := slice "bits-waiter" "event-reporter" "metrics-collector" "opi" "rootfs-patcher" "route-collector" "route-pod-informer" "route-statefulset-informer" "staging-reporter" }}

resources:
#- name: ci
#  type: git
#  source:
#    uri: git@github.com:SUSE/scf-eirini-ci.git
#    private_key: {{ "{{github-private-key}}" }}
#- name: git.scf
#  type: git
#  source:
#    uri: git@github.com:SUSE/scf.git
#    private_key: {{ "{{github-private-key}}" }}
#    branch: develop
- name: git.diego-ssh
  type: git
  source:
    uri: git@github.com:cloudfoundry/diego-ssh.git
    private_key: {{ "{{github-private-key}}" }}

- name: git.bits-service-release
  type: git
  source:
    uri: git@github.com:SUSE/bits-service-release.git
    private_key: {{ "{{github-private-key}}" }}
    tag_filter: "*"

- name: git.eirinifs
  type: git
  source:
    uri: git@github.com:cloudfoundry-incubator/eirinifs.git
    private_key: {{ "{{github-private-key}}" }}
    tag_filter: v*

#- name: github-release.eirini-release
#  type: github-release
#  source:
#    owner: cloudfoundry-incubator
#    repository: eirini-release
#    access_token: {{ "{{github-access-token}}" }}

- name: git.eirini-staging
  type: git
  source:
    uri: git@github.com:cloudfoundry-incubator/eirini-staging.git
    private_key: {{ "{{github-private-key}}" }}
    tag_filter: '[[:digit:]]*[.][[:digit:]]*[.][[:digit:]]*'

{{- range $_, $stagingImage := $stagingImages }}
- name: docker-image.{{ $stagingImage }}-image
  type: docker-image
  source:
    repository: ((docker-public-staging-registry))/((docker-public-staging-org))/recipe-{{ $stagingImage }}
    username: ((docker-public-staging-username))
    password: ((docker-public-staging-password))
{{ end }}

{{- range $_, $image := $otherImages }}
- name: docker-image.{{ $image }}-image
  type: docker-image
  source:
    repository: ((docker-public-staging-registry))/((docker-public-staging-org))/{{ $image }}
    username: ((docker-public-staging-username))
    password: ((docker-public-staging-password))
{{ end }}

- name: docker-image.eirinifs-sle15
  type: docker-image
  source:
    repository: ((docker-public-staging-registry))/((docker-public-staging-org))/eirinifs-sle15
    username: ((docker-public-staging-username))
    password: ((docker-public-staging-password))

# A base SLE15 image
- name: docker-image.sle15-sp1
  type: docker-image
  source:
    repository: registry.suse.com/suse/sle15
    tag: 15.1

- name: docker-image.bits-image
  type: docker-image
  source:
    repository: ((docker-public-staging-registry))/((docker-public-staging-org))/bits-service
    username: ((docker-public-staging-username))
    password: ((docker-public-staging-password))

# The SLE15 rootfs built in OBS
- name: docker-image.obs-sle15
  type: docker-image
  source:
    repository: registry.opensuse.org/cloud/platform/stack/rootfs/images/sle15

- name: git.eirini
  type: git
  source:
    uri: git@github.com:cloudfoundry-incubator/eirini.git
    private_key: {{ "{{github-private-key}}" }}
    tag_filter: '[[:digit:]]*[.][[:digit:]]*[.][[:digit:]]*'

- name: s3.sshd
  type: s3
  source:
    bucket: suse-eirini-bits
    region_name: eu-central-1
    regexp: sshd-(.*)
    access_key_id: ((aws-capbot-access-key))
    secret_access_key: ((aws-capbot-secret-key))
- name: semver.sshd
  type: semver
  source:
    driver: s3
    bucket: suse-eirini-bits
    key: version-sshd
    access_key_id: ((aws-capbot-access-key))
    secret_access_key: ((aws-capbot-secret-key))
    region_name: eu-central-1
#- name: s3.eirinifs-sle15
#  type: s3
#  source:
#    bucket: suse-eirini-bits
#    region_name: eu-central-1
#    regexp: eirinifs-sle15-v(.*).tar
#    access_key_id: ((aws-capbot-access-key))
#    secret_access_key: ((aws-capbot-secret-key))

#- name: github-release.sle15-release
#  type: github-release
#  source:
#    owner: SUSE
#    repository: cf-sle15-release
#    access_token: {{ "{{github-access-token}}" }}
jobs:
  - name: build-sshd
    plan:
    - in_parallel:
      - get: git.diego-ssh
        trigger: true
      - get: semver.sshd
        params: {bump: minor}
    - task: build-sshd
      config:
        platform: linux
        image_resource:
          type: registry-image
          source:
            repository: golang
            tag: 1.14
        inputs:
          - name: git.diego-ssh
          - name: semver.sshd
        outputs:
          - name: diego-ssh-build
        run:
          path: bash
          args:
          - -exc
          - |
            mkdir -p $GOPATH/src/code.cloudfoundry.org/
            ln -s $PWD/git.diego-ssh $GOPATH/src/code.cloudfoundry.org/diego-ssh
            pushd $GOPATH/src/code.cloudfoundry.org/diego-ssh/cmd/sshd

            # Fix the incompatibility of the sftp library by checking out a compatible commit (no dependency management in diego-ssh ?!)
            go get -d

            go build
            popd
            mv $GOPATH/src/code.cloudfoundry.org/diego-ssh/cmd/sshd/sshd diego-ssh-build/sshd-$(cat semver.sshd/version)
    - put: semver.sshd
      params:
        file: semver.sshd/version
    - put: s3.sshd
      params:
        file: diego-ssh-build/sshd-*
        acl: public-read
  - name: build-eirinifs-sle15
    plan:
    - in_parallel:
      - get: s3.sshd
        trigger: true
        passed: [ build-sshd ]
      - get: git.eirinifs
        params:
          submodules: all
          submodule_recursive: true
      - get: docker-image.obs-sle15
        trigger: true
    - task: prepare_source_dir
      config:
        platform: linux
        image_resource:
          type: registry-image
          source:
            repository: splatform/bosh-cli_stemcell_pusher
        inputs:
          - name: s3.sshd
          - name: git.eirinifs
          - name: docker-image.obs-sle15
        outputs:
          - name: source_dir
        run:
          path: bash
          args:
          - -exc
          - |
            cp -r git.eirinifs/* source_dir/
            cp s3.sshd/sshd-* source_dir/sshd
            chmod +x source_dir/sshd

            cat << EOF > source_dir/new-launch
            #!/bin/bash
            # Consume the EIRINI SSH fingerprint so that the sshd daemon advertize it
            /lifecycle/sshd -inheritDaemonEnv --hostKey "${EIRINI_HOST_KEY}" --authorizedKey "${EIRINI_SSH_KEY}" --address 0.0.0.0:2222 2>&1 > /tmp/sshd.log &
            exec /lifecycle/original-launch
            EOF

            rootfs_version=$(cat docker-image.obs-sle15/docker_inspect.json | jq -r '.[0].Config.Labels["org.opencontainers.image.version"]')
            eirinifs_version=$(cat git.eirinifs/.git/ref)

            echo "{ \"eirinifs-version\": \"${eirinfs_version}\", \"timestamp\": \"$(date +"%s")\" }" > source_dir/labels
            echo "{ \"baseimage\": \"registry.opensuse.org/cloud/platform/stack/rootfs/images/sle15:${rootfs_version}\" }" > source_dir/build_args
            echo ${rootfs_version} > source_dir/image_tag

            # Change the Dockerfile in order to start sshd inside the eirinifs image
            cat << EOF >> source_dir/image/Dockerfile
            RUN mv /lifecycle/launch /lifecycle/original-launch
            COPY ./new-launch /lifecycle/launch
            COPY ./sshd /lifecycle/sshd
            EOF

    - put: docker-image.eirinifs-sle15
      params:
        build_args_file: source_dir/build_args
        labels_file: source_dir/labels
        build: source_dir
        dockerfile: source_dir/image/Dockerfile
        tag_file: source_dir/image_tag
        tag_as_latest: true

   # - put: s3.eirinifs-sle15
   #   params:
   #     file: eirinifs-sle15-output/eirinifs-sle15-v*.tar
   #     acl: public-read

{{- range $_, $stagingImage := $stagingImages }}
  - name: build-{{ $stagingImage }}-image
    plan:
    - in_parallel:
      - get: docker-image.obs-sle15
        trigger: true
      - get: git.eirini-staging
        trigger: true
    - task: prepare_image_build_files
      config:
        platform: linux
        image_resource:
          type: registry-image
          source:
            repository: splatform/bosh-cli_stemcell_pusher
        inputs:
          - name: docker-image.obs-sle15
          - name: git.eirini-staging
        outputs:
          - name: image_labels
        run:
          path: bash
          args:
          - -exc
          - |
            eirini_staging_version=$(cat git.eirini-staging/.git/ref)
            rootfs_version=$(cat docker-image.obs-sle15/docker_inspect.json | jq -r '.[0].Config.Labels["org.opencontainers.image.version"]')
            image_tag="${eirini_staging_version}-${rootfs_version}"
            
            pushd  git.eirini-staging
            echo "{ \"commit\": \"$(git rev-parse HEAD)\", \"timestamp\": \"$(date +"%s")\" }" > ../image_labels/labels
            echo "{ \"baseimage\": \"registry.opensuse.org/cloud/platform/stack/rootfs/images/sle15:${rootfs_version}\", \"GIT_SHA\": \"$(git rev-parse HEAD)\" }" > ../image_labels/build_args
            echo ${image_tag} > ../image_labels/tag
            popd
    - put: docker-image.{{ $stagingImage }}-image
      params:
        build_args_file: image_labels/build_args
        build: git.eirini-staging
        dockerfile: git.eirini-staging/image/{{ $stagingImage }}/Dockerfile
        tag_file: image_labels/tag
        labels_file: image_labels/labels
        tag_as_latest: true

#   - name: create-{{ $stagingImage }}-pr
#     plan:
#     - in_parallel:
#       - get: docker-image.{{ $stagingImage }}-image
#         trigger: true
#         passed: [ build-{{ $stagingImage }}-image ]
#       - get: git.scf
#         params:
#           submodules: none
#       - get: ci
#     - task: create-scf-pr
#       input_mapping: { semver: semver.{{ $stagingImage }}-image, docker_image: docker-image.{{ $stagingImage }}-image }
#       config:
#         platform: linux
#         image_resource:
#           type: registry-image
#           source:
#             repository: splatform/concourse-brats
#         inputs:
#           - name: semver
#           - name: docker_image
#           - name: ci
#           - name: git.scf
#         params:
#           GITHUB_TOKEN: {{ "{{github-access-token}}" }}
#           GITHUB_PRIVATE_KEY: |
#             {{ "{{github-private-key}}" }}
#           GIT_MAIL: {{ "{{github-username}}" }}
#           GIT_USER: suse-cf-ci-bot
#           IMAGE_TO_REPLACE: recipe-{{ $stagingImage }}
#         run:
#           path: ci/tasks/create-pr.sh
{{ end }}

{{- range $_, $image := $otherImages }}
  - name: build-{{ $image }}-image
    plan:
    - in_parallel:
      - get: git.eirini
        trigger: true
    - task: prepare_docker_meta
      config:
        platform: linux
        image_resource:
          type: registry-image
          source:
            repository: splatform/bosh-cli
            tag: ffdc518965675023196dd8cf511e3680484c3ed0
        inputs:
          - name: git.eirini
        outputs:
          - name: docker_meta
        run:
          path: bash
          args:
          - -exc
          - |
            pushd git.eirini
            eirini_tag=$(cat .git/ref)
            echo "{ \"eirini_version\": \"${eirini_tag}\", \"timestamp\": \"$(date +"%s")\" }" > ../docker_meta/labels
            echo "{ \"GIT_SHA\": \"$(git rev-parse HEAD)\" }" > ../docker_meta/build_args
            echo "${eirini_tag}" > ../docker_meta/tag
            popd

            # Build opi image from scratch. Upstream switched to Ubuntu, not sure why:
            # https://github.com/cloudfoundry-incubator/eirini/commit/d0587acbc1523247051f35a4099016942410a12
            cp git.eirini/docker/{{ $image }}/Dockerfile docker_meta/Dockerfile
            {{ if eq $image "opi" }}
            sed -i 's/cloudfoundry\/run:tiny/scratch/' docker_meta/Dockerfile
            {{ end }}

    - put: docker-image.{{ $image }}-image
      params:
        build: git.eirini
        dockerfile: docker_meta/Dockerfile
        tag_file: docker_meta/tag
        build_args_file: docker_meta/build_args
        labels_file: docker_meta/labels
        tag_as_latest: true
{{ end }}

  - name: build-bits-image
    plan:
    - in_parallel:
      - get: git.bits-service-release
        trigger: true
      - get: docker-image.sle15-sp1
        trigger: true
      - get: docker-image.eirinifs-sle15
        trigger: true
        passed: [ build-eirinifs-sle15 ]
        params:
          rootfs: true
    - task: prepare_docker_meta
      config:
        platform: linux
        image_resource:
          type: registry-image
          source:
            repository: splatform/bosh-cli_stemcell_pusher
        inputs:
          - name: git.bits-service-release
          - name: docker-image.sle15-sp1
          - name: docker-image.eirinifs-sle15
        outputs:
          - name: docker_meta
        run:
          path: bash
          args:
          - -exc
          - |
            cat <<'EOF' > docker_meta/Dockerfile
            ARG baseimage=registry.opensuse.org/suse/templates/images/sle-15-sp1/images/my-container:latest

            FROM golang:1.13 as builder
            WORKDIR /bits-service-release/
            COPY . .

            ENV GOPATH=/bits-service-release
            RUN wget https://github.com/Masterminds/glide/releases/download/v0.13.3/glide-v0.13.3-linux-amd64.tar.gz
            RUN tar --strip 1 -C /usr/bin -xf glide-v0.13.3-linux-amd64.tar.gz  linux-amd64/glide

            RUN cd /bits-service-release/src/github.com/cloudfoundry-incubator/bits-service && glide install
            RUN GOOS=linux GOARCH=amd64 go build -o bitsgo github.com/cloudfoundry-incubator/bits-service/cmd/bitsgo

            FROM ${baseimage}
            COPY --from=builder /bits-service-release/bitsgo /workspace/jobs/bits-service/bin/
            COPY --from=builder /bits-service-release/eirinifs.tar /assets/eirinifs.tar

            USER 1001

            ENTRYPOINT [ "/workspace/jobs/bits-service/bin/bitsgo", "--config", "/workspace/jobs/bits-service/config/bits-service.yml" ]
            ARG GIT_SHA
            LABEL org.opencontainers.image.revision=$GIT_SHA \
                  org.opencontainers.image.source=https://code.cloudfoundry.org/bits-service
            EOF

            cp docker-image.eirinifs-sle15/rootfs.tar docker_meta/eirinifs.tar
            cp -r git.bits-service-release/* docker_meta/

            sle_version=$(cat docker-image.sle15-sp1/docker_inspect.json | jq -r '.[0].Config.Labels["org.opencontainers.image.version"]')
            eirinifs_version=$(cat docker-image.eirinifs-sle15/docker_inspect.json | jq -r '.[0].Config.Labels["org.opencontainers.image.version"]')
            pushd git.bits-service-release
            bits_tag=$(cat .git/ref)
            echo "{ \"bits_service_release_version\": \"${bits_tag}\", \"timestamp\": \"$(date +"%s")\" }" > ../docker_meta/labels
            echo "{ \"GIT_SHA\": \"$(git rev-parse HEAD)\" }" > ../docker_meta/build_args
            echo "${bits_tag}-${sle_version}-${eirinifs_version}" > ../docker_meta/tag
            popd

    - put: docker-image.bits-image
      params:
        build: docker_meta
        dockerfile: docker_meta/Dockerfile
        tag_file: docker_meta/tag
        build_args_file: docker_meta/build_args
        labels_file: docker_meta/labels
        tag_as_latest: true
